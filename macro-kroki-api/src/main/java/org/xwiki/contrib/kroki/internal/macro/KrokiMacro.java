/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.contrib.kroki.internal.macro;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.xwiki.component.annotation.Component;
import org.xwiki.contrib.kroki.internal.caching.DiagramCacheManager;
import org.xwiki.contrib.kroki.internal.caching.HashCreator;
import org.xwiki.contrib.kroki.macro.KrokiMacroParameters;
import org.xwiki.contrib.kroki.renderer.DiagramRenderer;
import org.xwiki.model.reference.DocumentReference;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.MetaDataBlock;
import org.xwiki.rendering.block.match.MetadataBlockMatcher;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.MacroExecutionException;
import org.xwiki.rendering.macro.descriptor.DefaultContentDescriptor;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.resource.ResourceReferenceSerializer;
import org.xwiki.resource.SerializeResourceReferenceException;
import org.xwiki.resource.UnsupportedResourceReferenceException;
import org.xwiki.resource.temporary.TemporaryResourceReference;
import org.xwiki.resource.temporary.TemporaryResourceStore;
import org.xwiki.url.ExtendedURL;

/**
 * Used to generate an image based on the textual description of a diagram.
 *
 * @version $Id$
 */
@Component
@Named("kroki")
@Singleton
public class KrokiMacro extends AbstractMacro<KrokiMacroParameters>
{
    private static final String DESCRIPTION = "Macro inserting a diagram in a chosen format generated by kroki";

    @Inject
    private TemporaryResourceStore temporaryResourceStore;

    @Inject
    @Named("standard/tmp")
    private ResourceReferenceSerializer<TemporaryResourceReference, ExtendedURL>
        urlTemporaryResourceReferenceSerializer;

    @Inject
    private DocumentReferenceResolver<String> documentReferenceResolver;

    @Inject
    private DiagramRenderer diagramRenderer;

    @Inject
    private DiagramCacheManager cacheManager;

    /**
     * Create and initialize the descriptor of the macro.
     */
    public KrokiMacro()
    {
        super("Kroki", DESCRIPTION, new DefaultContentDescriptor("Diagram content to be rendered by kroki", true,
            Block.LIST_BLOCK_TYPE), KrokiMacroParameters.class);
    }

    @Override
    public boolean supportsInlineMode()
    {
        return false;
    }

    @Override
    public List<Block> execute(KrokiMacroParameters parameters, String content, MacroTransformationContext context)
        throws MacroExecutionException
    {
        try {
            EntityReference sourceDocumentReference = extractSourceDocumentReference(context.getCurrentMacroBlock());

            TemporaryResourceReference diagramFileReference =
                getTemporaryResourceReference(parameters.getDiagramType(), parameters.getOutputType(), content,
                    sourceDocumentReference);

            ExtendedURL temporaryResourceExtendedURL =
                this.urlTemporaryResourceReferenceSerializer.serialize(diagramFileReference);
            String temporaryResourceURL = temporaryResourceExtendedURL.serialize();

            ResourceReference fileReference = new ResourceReference(temporaryResourceURL, ResourceType.URL);
            String fileName = parameters.getDiagramType() + " diagram";

            Block resultBlock = KrokiBlockGenerator.createImageRefBlock(fileReference, fileName);

            return Collections.singletonList(resultBlock);
        } catch (IOException | SerializeResourceReferenceException | UnsupportedResourceReferenceException e) {
            throw new RuntimeException(e);
        }
    }

    private DocumentReference extractSourceDocumentReference(Block source)
    {
        String contentSource = null;
        MetaDataBlock metaDataBlock =
            source.getFirstBlock(new MetadataBlockMatcher(MetaData.SOURCE), Block.Axes.ANCESTOR);
        if (metaDataBlock != null) {
            contentSource = (String) metaDataBlock.getMetaData().getMetaData(MetaData.SOURCE);
        }
        return this.documentReferenceResolver.resolve(contentSource);
    }

    private TemporaryResourceReference getTemporaryResourceReference(String diagramType, String outputType,
        String content, EntityReference docReference) throws IOException
    {
        String contentHash = null;
        TemporaryResourceReference tempFileReference = null;
        HashCreator hashCreator = new HashCreator();
        try {
            contentHash = hashCreator.createMD5Hash(diagramType + outputType + content);
            tempFileReference = cacheManager.getResourceFromCache(contentHash);
        } catch (Exception ignored) {
        }

        if (tempFileReference == null) {
            tempFileReference = new TemporaryResourceReference("kroki",
                Arrays.asList(diagramType, UUID.randomUUID() + "." + outputType), docReference);
            this.temporaryResourceStore.createTemporaryFile(tempFileReference,
                diagramRenderer.render(diagramType, outputType, content));
            cacheManager.addResourceToCache(contentHash, tempFileReference);
        }

        return tempFileReference;
    }
}
