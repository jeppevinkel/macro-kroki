/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.contrib.kroki.macro;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;

import org.xwiki.component.annotation.Component;
import org.xwiki.contrib.kroki.caching.DiagramCacheManager;
import org.xwiki.contrib.kroki.caching.HashCreator;
import org.xwiki.contrib.kroki.generator.DiagramGenerator;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.rendering.block.Block;
import org.xwiki.rendering.block.ImageBlock;
import org.xwiki.rendering.block.LinkBlock;
import org.xwiki.rendering.block.MetaDataBlock;
import org.xwiki.rendering.block.ParagraphBlock;
import org.xwiki.rendering.block.match.MetadataBlockMatcher;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.MacroExecutionException;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.resource.ResourceReferenceSerializer;
import org.xwiki.resource.SerializeResourceReferenceException;
import org.xwiki.resource.UnsupportedResourceReferenceException;
import org.xwiki.resource.temporary.TemporaryResourceReference;
import org.xwiki.resource.temporary.TemporaryResourceStore;
import org.xwiki.url.ExtendedURL;

/**
 * Used to generate an image based on the textual description of a diagram.
 *
 * @version $Id$
 */
@Component
@Named("kroki")
@Singleton
public class KrokiMacro extends AbstractMacro<KrokiMacroParameters>
{
    private static final String DESCRIPTION = "Macro inserting a diagram in a chosen format generated by kroki";

    @Inject
    private TemporaryResourceStore temporaryResourceStore;

    @Inject
    @Named("standard/tmp")
    private ResourceReferenceSerializer<TemporaryResourceReference, ExtendedURL>
        urlTemporaryResourceReferenceSerializer;

    @Inject
    private DocumentReferenceResolver<String> documentReferenceResolver;

    @Inject
    @Named("docker-kroki")
    private DiagramGenerator diagramGenerator;

    @Inject
    private DiagramCacheManager cacheManager;

    /**
     * Create and initialize the descriptor of the macro.
     */
    public KrokiMacro()
    {
        super("Kroki", DESCRIPTION, KrokiMacroParameters.class);
    }

    @Override
    public boolean supportsInlineMode()
    {
        return true;
    }

    @Override
    public List<Block> execute(KrokiMacroParameters parameters, String content, MacroTransformationContext context)
        throws MacroExecutionException
    {
        try {
            String source = extractSourceContentReference(context.getCurrentMacroBlock());
            EntityReference currentDocumentReference = this.documentReferenceResolver.resolve(source);

            TemporaryResourceReference tempFileReference =
                getTemporaryResourceReference(parameters.getDiagramLib(), parameters.getImgFormat(), content,
                    currentDocumentReference);

            String temporaryResourceURL =
                this.urlTemporaryResourceReferenceSerializer.serialize(tempFileReference).serialize();

            ResourceReference fileReference = new ResourceReference(temporaryResourceURL, ResourceType.URL);
            ImageBlock img = new ImageBlock(fileReference, true);
            img.setParameter("alt", "Graph made with" + parameters.getDiagramLib());
            LinkBlock linkBlock = new LinkBlock(Collections.singletonList(img), fileReference, true);
            linkBlock.setParameter("title", "Generated graph");
            linkBlock.setParameter("target", "_blank");

            Block resultBlock;
            if (context.isInline()) {
                resultBlock = linkBlock;
            } else {
                resultBlock = new ParagraphBlock(Collections.singletonList(linkBlock));
            }

            return Collections.singletonList(resultBlock);
        } catch (IOException | SerializeResourceReferenceException | UnsupportedResourceReferenceException e) {
            throw new RuntimeException(e);
        }
    }

    private String extractSourceContentReference(Block source)
    {
        String contentSource = null;
        MetaDataBlock metaDataBlock =
            source.getFirstBlock(new MetadataBlockMatcher(MetaData.SOURCE), Block.Axes.ANCESTOR);
        if (metaDataBlock != null) {
            contentSource = (String) metaDataBlock.getMetaData().getMetaData(MetaData.SOURCE);
        }
        return contentSource;
    }

    private TemporaryResourceReference getTemporaryResourceReference(String diagramLibrary, String imgFormat,
        String content, EntityReference docReference) throws IOException
    {
        String contentHash = null;
        TemporaryResourceReference tempFileReference = null;
        HashCreator hashCreator = new HashCreator();
        try {
            contentHash = hashCreator.createMD5Hash(diagramLibrary + imgFormat + content);
            tempFileReference = cacheManager.getResourceFromCache(contentHash);
        } catch (NoSuchAlgorithmException ignored) {
        }

        if (tempFileReference == null) {
            tempFileReference = new TemporaryResourceReference("krokiproto",
                Arrays.asList("diagram", UUID.randomUUID() + "." + imgFormat), docReference);
            this.temporaryResourceStore.createTemporaryFile(tempFileReference,
                diagramGenerator.generateDiagram(diagramLibrary, imgFormat, content));
            cacheManager.addResourceToCache(contentHash, tempFileReference);
        }

        return tempFileReference;
    }
}
