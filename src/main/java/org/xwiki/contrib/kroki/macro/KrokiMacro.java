package org.xwiki.contrib.kroki.macro;

import org.xwiki.component.annotation.Component;
import org.xwiki.contrib.kroki.generator.DiagramGenerator;
import org.xwiki.model.reference.DocumentReferenceResolver;
import org.xwiki.model.reference.EntityReference;
import org.xwiki.rendering.block.*;
import org.xwiki.rendering.block.match.MetadataBlockMatcher;
import org.xwiki.rendering.listener.MetaData;
import org.xwiki.rendering.listener.reference.ResourceReference;
import org.xwiki.rendering.listener.reference.ResourceType;
import org.xwiki.rendering.macro.AbstractMacro;
import org.xwiki.rendering.macro.MacroExecutionException;
import org.xwiki.rendering.transformation.MacroTransformationContext;
import org.xwiki.resource.ResourceReferenceSerializer;
import org.xwiki.resource.SerializeResourceReferenceException;
import org.xwiki.resource.UnsupportedResourceReferenceException;
import org.xwiki.resource.temporary.TemporaryResourceReference;
import org.xwiki.resource.temporary.TemporaryResourceStore;
import org.xwiki.url.ExtendedURL;

import javax.inject.Inject;
import javax.inject.Named;
import java.io.IOException;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

@Component
@Named("kroki")
public class KrokiMacro extends AbstractMacro<KrokiMacroParameters> {
    private static String DESCRIPTION = "Macro inserting a diagram in a chosen format generated by kroki";

    @Inject
    private TemporaryResourceStore temporaryResourceStore;

    @Inject
    @Named("standard/tmp")
    private ResourceReferenceSerializer<TemporaryResourceReference, ExtendedURL> urlTemporaryResourceReferenceSerializer;

    @Inject
    private DocumentReferenceResolver<String> documentReferenceResolver;

    @Inject
    @Named("docker-kroki")
    private DiagramGenerator diagramGenerator;

    public KrokiMacro()
    {
        super("Kroki", DESCRIPTION, KrokiMacroParameters.class);
    }

    @Override
    public boolean supportsInlineMode() {
        return true;
    }

    @Override
    public List<Block> execute(KrokiMacroParameters parameters, String content, MacroTransformationContext context) throws MacroExecutionException {
        try {
            String source = extractSourceContentReference(context.getCurrentMacroBlock());
            EntityReference reference = this.documentReferenceResolver.resolve(source);

            TemporaryResourceReference tempFileReference = new TemporaryResourceReference("krokiproto", Arrays.asList("graph", UUID.randomUUID().toString() + "." + parameters.getImgFormat()), reference);

            this.temporaryResourceStore.createTemporaryFile(tempFileReference, diagramGenerator.generateDiagram(parameters.getDiagramLib(), parameters.getImgFormat(), content));

            String temporaryResourceURL = this.urlTemporaryResourceReferenceSerializer.serialize(tempFileReference).serialize();

            ResourceReference fileReference = new ResourceReference(temporaryResourceURL, ResourceType.URL);
            ImageBlock img = new ImageBlock(fileReference, true);
            img.setParameter("alt", "Graph made with" + parameters.getDiagramLib());
            LinkBlock linkBlock = new LinkBlock(Collections.singletonList((Block) img), fileReference, true);
            linkBlock.setParameter("title", "Generated graph");
            linkBlock.setParameter("target", "_blank");

            Block resultBlock;
            if(context.isInline()){
                resultBlock = linkBlock;
            }
            else {
                resultBlock = new ParagraphBlock(Collections.singletonList((Block) linkBlock));
            }

            return Collections.singletonList(resultBlock);
        } catch (IOException | SerializeResourceReferenceException | UnsupportedResourceReferenceException e) {
            throw new RuntimeException(e);
        }
    }

    private String extractSourceContentReference(Block source)
    {
        String contentSource = null;
        MetaDataBlock metaDataBlock =
                source.getFirstBlock(new MetadataBlockMatcher(MetaData.SOURCE), Block.Axes.ANCESTOR);
        if (metaDataBlock != null) {
            contentSource = (String) metaDataBlock.getMetaData().getMetaData(MetaData.SOURCE);
        }
        return contentSource;
    }
}
